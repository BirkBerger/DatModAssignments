// Implementation file for parser generated by fsyacc
module ParserParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "ParserParser.fsp"

open ParserTypesAST

# 10 "ParserParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | LBRA
  | RBRA
  | TRUE
  | FALSE
  | NOT
  | AND
  | OR
  | ANDSC
  | ORSC
  | EQUAL
  | NOTEQUAL
  | GT
  | GET
  | LT
  | LET
  | EOF
  | VAR of (string)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_ANDSC
    | TOKEN_ORSC
    | TOKEN_EQUAL
    | TOKEN_NOTEQUAL
    | TOKEN_GT
    | TOKEN_GET
    | TOKEN_LT
    | TOKEN_LET
    | TOKEN_EOF
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_boolean

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TIMES  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | POW  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | LBRA  -> 7 
  | RBRA  -> 8 
  | TRUE  -> 9 
  | FALSE  -> 10 
  | NOT  -> 11 
  | AND  -> 12 
  | OR  -> 13 
  | ANDSC  -> 14 
  | ORSC  -> 15 
  | EQUAL  -> 16 
  | NOTEQUAL  -> 17 
  | GT  -> 18 
  | GET  -> 19 
  | LT  -> 20 
  | LET  -> 21 
  | EOF  -> 22 
  | VAR _ -> 23 
  | NUM _ -> 24 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TIMES 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_POW 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_LBRA 
  | 8 -> TOKEN_RBRA 
  | 9 -> TOKEN_TRUE 
  | 10 -> TOKEN_FALSE 
  | 11 -> TOKEN_NOT 
  | 12 -> TOKEN_AND 
  | 13 -> TOKEN_OR 
  | 14 -> TOKEN_ANDSC 
  | 15 -> TOKEN_ORSC 
  | 16 -> TOKEN_EQUAL 
  | 17 -> TOKEN_NOTEQUAL 
  | 18 -> TOKEN_GT 
  | 19 -> TOKEN_GET 
  | 20 -> TOKEN_LT 
  | 21 -> TOKEN_LET 
  | 22 -> TOKEN_EOF 
  | 23 -> TOKEN_VAR 
  | 24 -> TOKEN_NUM 
  | 27 -> TOKEN_end_of_input
  | 25 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_expression 
    | 6 -> NONTERM_expression 
    | 7 -> NONTERM_expression 
    | 8 -> NONTERM_expression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_expression 
    | 13 -> NONTERM_boolean 
    | 14 -> NONTERM_boolean 
    | 15 -> NONTERM_boolean 
    | 16 -> NONTERM_boolean 
    | 17 -> NONTERM_boolean 
    | 18 -> NONTERM_boolean 
    | 19 -> NONTERM_boolean 
    | 20 -> NONTERM_boolean 
    | 21 -> NONTERM_boolean 
    | 22 -> NONTERM_boolean 
    | 23 -> NONTERM_boolean 
    | 24 -> NONTERM_boolean 
    | 25 -> NONTERM_boolean 
    | 26 -> NONTERM_boolean 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 27 
let _fsyacc_tagOfErrorTerminal = 25

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | ANDSC  -> "ANDSC" 
  | ORSC  -> "ORSC" 
  | EQUAL  -> "EQUAL" 
  | NOTEQUAL  -> "NOTEQUAL" 
  | GT  -> "GT" 
  | GET  -> "GET" 
  | LT  -> "LT" 
  | LET  -> "LET" 
  | EOF  -> "EOF" 
  | VAR _ -> "VAR" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | ANDSC  -> (null : System.Object) 
  | ORSC  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQUAL  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GET  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 22us; 65535us; 0us; 14us; 21us; 4us; 22us; 5us; 23us; 6us; 24us; 7us; 25us; 8us; 26us; 9us; 27us; 10us; 30us; 11us; 31us; 12us; 33us; 13us; 37us; 14us; 44us; 14us; 45us; 14us; 46us; 14us; 47us; 14us; 49us; 15us; 50us; 16us; 51us; 17us; 52us; 18us; 53us; 19us; 54us; 20us; 7us; 65535us; 0us; 2us; 31us; 43us; 37us; 38us; 44us; 39us; 45us; 40us; 46us; 41us; 47us; 42us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 26us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 5us; 1us; 16us; 17us; 18us; 19us; 1us; 1us; 6us; 2us; 2us; 3us; 4us; 5us; 6us; 6us; 2us; 3us; 3us; 4us; 5us; 6us; 6us; 2us; 3us; 4us; 4us; 5us; 6us; 6us; 2us; 3us; 4us; 5us; 5us; 6us; 6us; 2us; 3us; 4us; 5us; 6us; 6us; 6us; 2us; 3us; 4us; 5us; 6us; 7us; 6us; 2us; 3us; 4us; 5us; 6us; 8us; 6us; 2us; 3us; 4us; 5us; 6us; 11us; 12us; 2us; 3us; 4us; 5us; 6us; 11us; 21us; 22us; 23us; 24us; 25us; 26us; 6us; 2us; 3us; 4us; 5us; 6us; 12us; 11us; 2us; 3us; 4us; 5us; 6us; 21us; 22us; 23us; 24us; 25us; 26us; 6us; 2us; 3us; 4us; 5us; 6us; 21us; 6us; 2us; 3us; 4us; 5us; 6us; 22us; 6us; 2us; 3us; 4us; 5us; 6us; 23us; 6us; 2us; 3us; 4us; 5us; 6us; 24us; 6us; 2us; 3us; 4us; 5us; 6us; 25us; 6us; 2us; 3us; 4us; 5us; 6us; 26us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 2us; 10us; 12us; 1us; 11us; 2us; 11us; 20us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 5us; 15us; 16us; 17us; 18us; 19us; 5us; 16us; 16us; 17us; 18us; 19us; 5us; 16us; 17us; 17us; 18us; 19us; 5us; 16us; 17us; 18us; 18us; 19us; 5us; 16us; 17us; 18us; 19us; 19us; 5us; 16us; 17us; 18us; 19us; 20us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 10us; 12us; 19us; 26us; 33us; 40us; 47us; 54us; 61us; 68us; 81us; 88us; 100us; 107us; 114us; 121us; 128us; 135us; 142us; 144us; 146us; 148us; 150us; 152us; 154us; 156us; 158us; 161us; 163us; 166us; 168us; 170us; 172us; 174us; 176us; 178us; 184us; 190us; 196us; 202us; 208us; 214us; 216us; 218us; 220us; 222us; 224us; 226us; 228us; 230us; 232us; 234us; |]
let _fsyacc_action_rows = 55
let _fsyacc_actionTableElements = [|8us; 32768us; 2us; 26us; 3us; 27us; 5us; 31us; 9us; 35us; 10us; 36us; 11us; 37us; 23us; 29us; 24us; 28us; 0us; 49152us; 5us; 32768us; 12us; 44us; 13us; 45us; 14us; 46us; 15us; 47us; 22us; 3us; 0us; 16385us; 1us; 16386us; 4us; 25us; 1us; 16387us; 4us; 25us; 3us; 16388us; 0us; 21us; 1us; 22us; 4us; 25us; 3us; 16389us; 0us; 21us; 1us; 22us; 4us; 25us; 1us; 16390us; 4us; 25us; 3us; 16391us; 0us; 21us; 1us; 22us; 4us; 25us; 3us; 16392us; 0us; 21us; 1us; 22us; 4us; 25us; 6us; 32768us; 0us; 21us; 1us; 22us; 2us; 23us; 3us; 24us; 4us; 25us; 6us; 32us; 12us; 32768us; 0us; 21us; 1us; 22us; 2us; 23us; 3us; 24us; 4us; 25us; 6us; 32us; 16us; 49us; 17us; 50us; 18us; 51us; 19us; 52us; 20us; 53us; 21us; 54us; 6us; 32768us; 0us; 21us; 1us; 22us; 2us; 23us; 3us; 24us; 4us; 25us; 8us; 34us; 11us; 32768us; 0us; 21us; 1us; 22us; 2us; 23us; 3us; 24us; 4us; 25us; 16us; 49us; 17us; 50us; 18us; 51us; 19us; 52us; 20us; 53us; 21us; 54us; 5us; 16405us; 0us; 21us; 1us; 22us; 2us; 23us; 3us; 24us; 4us; 25us; 5us; 16406us; 0us; 21us; 1us; 22us; 2us; 23us; 3us; 24us; 4us; 25us; 5us; 16407us; 0us; 21us; 1us; 22us; 2us; 23us; 3us; 24us; 4us; 25us; 5us; 16408us; 0us; 21us; 1us; 22us; 2us; 23us; 3us; 24us; 4us; 25us; 5us; 16409us; 0us; 21us; 1us; 22us; 2us; 23us; 3us; 24us; 4us; 25us; 5us; 16410us; 0us; 21us; 1us; 22us; 2us; 23us; 3us; 24us; 4us; 25us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 0us; 16393us; 1us; 16394us; 7us; 33us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 8us; 32768us; 2us; 26us; 3us; 27us; 5us; 31us; 9us; 35us; 10us; 36us; 11us; 37us; 23us; 29us; 24us; 28us; 0us; 16395us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 8us; 32768us; 2us; 26us; 3us; 27us; 5us; 31us; 9us; 35us; 10us; 36us; 11us; 37us; 23us; 29us; 24us; 28us; 4us; 16399us; 12us; 44us; 13us; 45us; 14us; 46us; 15us; 47us; 2us; 16400us; 14us; 46us; 15us; 47us; 2us; 16401us; 14us; 46us; 15us; 47us; 0us; 16402us; 0us; 16403us; 5us; 32768us; 6us; 48us; 12us; 44us; 13us; 45us; 14us; 46us; 15us; 47us; 8us; 32768us; 2us; 26us; 3us; 27us; 5us; 31us; 9us; 35us; 10us; 36us; 11us; 37us; 23us; 29us; 24us; 28us; 8us; 32768us; 2us; 26us; 3us; 27us; 5us; 31us; 9us; 35us; 10us; 36us; 11us; 37us; 23us; 29us; 24us; 28us; 8us; 32768us; 2us; 26us; 3us; 27us; 5us; 31us; 9us; 35us; 10us; 36us; 11us; 37us; 23us; 29us; 24us; 28us; 8us; 32768us; 2us; 26us; 3us; 27us; 5us; 31us; 9us; 35us; 10us; 36us; 11us; 37us; 23us; 29us; 24us; 28us; 0us; 16404us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; 5us; 32768us; 2us; 26us; 3us; 27us; 5us; 30us; 23us; 29us; 24us; 28us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 9us; 10us; 16us; 17us; 19us; 21us; 25us; 29us; 31us; 35us; 39us; 46us; 59us; 66us; 78us; 84us; 90us; 96us; 102us; 108us; 114us; 120us; 126us; 132us; 138us; 144us; 150us; 156us; 157us; 159us; 165us; 174us; 175us; 181us; 182us; 183us; 184us; 193us; 198us; 201us; 204us; 205us; 206us; 212us; 221us; 230us; 239us; 248us; 249us; 255us; 261us; 267us; 273us; 279us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 1us; 1us; 3us; 4us; 1us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 16395us; 65535us; 16396us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 238 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 247 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 38 "ParserParser.fsp"
                                                      _1 
                   )
# 38 "ParserParser.fsp"
                 : logic));
# 258 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "ParserParser.fsp"
                                                         TimesExpr(_1,_3) 
                   )
# 48 "ParserParser.fsp"
                 : expr));
# 270 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "ParserParser.fsp"
                                                         DivExpr(_1,_3) 
                   )
# 49 "ParserParser.fsp"
                 : expr));
# 282 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "ParserParser.fsp"
                                                         PlusExpr(_1,_3) 
                   )
# 50 "ParserParser.fsp"
                 : expr));
# 294 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "ParserParser.fsp"
                                                         MinusExpr(_1,_3) 
                   )
# 51 "ParserParser.fsp"
                 : expr));
# 306 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "ParserParser.fsp"
                                                         PowExpr(_1,_3) 
                   )
# 52 "ParserParser.fsp"
                 : expr));
# 318 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "ParserParser.fsp"
                                                         UPlusExpr(_2) 
                   )
# 53 "ParserParser.fsp"
                 : expr));
# 329 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "ParserParser.fsp"
                                                         UMinusExpr(_2) 
                   )
# 54 "ParserParser.fsp"
                 : expr));
# 340 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "ParserParser.fsp"
                                                         Num(_1) 
                   )
# 55 "ParserParser.fsp"
                 : expr));
# 351 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "ParserParser.fsp"
                                                         Var(_1) 
                   )
# 56 "ParserParser.fsp"
                 : expr));
# 362 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "ParserParser.fsp"
                                                         _2 
                   )
# 57 "ParserParser.fsp"
                 : expr));
# 373 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "ParserParser.fsp"
                                                         Index(_3) 
                   )
# 58 "ParserParser.fsp"
                 : expr));
# 385 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "ParserParser.fsp"
                                      True(true) 
                   )
# 61 "ParserParser.fsp"
                 : logic));
# 395 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "ParserParser.fsp"
                                       False(false) 
                   )
# 62 "ParserParser.fsp"
                 : logic));
# 405 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "ParserParser.fsp"
                                           NotLogic(_2) 
                   )
# 63 "ParserParser.fsp"
                 : logic));
# 416 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "ParserParser.fsp"
                                                 AndLogic(_1,_3) 
                   )
# 64 "ParserParser.fsp"
                 : logic));
# 428 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "ParserParser.fsp"
                                                OrLogic(_1,_3) 
                   )
# 65 "ParserParser.fsp"
                 : logic));
# 440 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "ParserParser.fsp"
                                                   AndSCLogic(_1,_3) 
                   )
# 66 "ParserParser.fsp"
                 : logic));
# 452 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "ParserParser.fsp"
                                                  OrSCLogic(_1,_3) 
                   )
# 67 "ParserParser.fsp"
                 : logic));
# 464 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "ParserParser.fsp"
                                                _2 
                   )
# 68 "ParserParser.fsp"
                 : logic));
# 475 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "ParserParser.fsp"
                                                       EqualLogic(_1,_3) 
                   )
# 69 "ParserParser.fsp"
                 : logic));
# 487 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "ParserParser.fsp"
                                                            NotEqualLogic(_1,_3) 
                   )
# 70 "ParserParser.fsp"
                 : logic));
# 499 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "ParserParser.fsp"
                                                        GTLogic(_1,_3) 
                   )
# 71 "ParserParser.fsp"
                 : logic));
# 511 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "ParserParser.fsp"
                                                         GETLogic(_1,_3) 
                   )
# 72 "ParserParser.fsp"
                 : logic));
# 523 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "ParserParser.fsp"
                                                        LTLogic(_1,_3) 
                   )
# 73 "ParserParser.fsp"
                 : logic));
# 535 "ParserParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "ParserParser.fsp"
                                                         LETLogic(_1,_3) 
                   )
# 74 "ParserParser.fsp"
                 : logic));
|]
# 548 "ParserParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 28;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : logic =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
