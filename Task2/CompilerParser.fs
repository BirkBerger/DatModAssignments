// Implementation file for parser generated by fsyacc
module CompilerParser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 2 "CompilerParser.fsp"

open CompilerTypesAST

# 10 "CompilerParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | TIMES
  | DIV
  | PLUS
  | MINUS
  | POW
  | LPAR
  | RPAR
  | OPTION
  | LBRA
  | RBRA
  | TRUE
  | FALSE
  | NOT
  | AND
  | OR
  | ANDSC
  | ORSC
  | EQUAL
  | NOTEQUAL
  | GT
  | GET
  | LT
  | LET
  | ASSIGN
  | NEXT
  | IF
  | FI
  | DO
  | OD
  | SKIP
  | TO
  | EOF
  | VAR of (string)
  | NUM of (float)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_TIMES
    | TOKEN_DIV
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_POW
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_OPTION
    | TOKEN_LBRA
    | TOKEN_RBRA
    | TOKEN_TRUE
    | TOKEN_FALSE
    | TOKEN_NOT
    | TOKEN_AND
    | TOKEN_OR
    | TOKEN_ANDSC
    | TOKEN_ORSC
    | TOKEN_EQUAL
    | TOKEN_NOTEQUAL
    | TOKEN_GT
    | TOKEN_GET
    | TOKEN_LT
    | TOKEN_LET
    | TOKEN_ASSIGN
    | TOKEN_NEXT
    | TOKEN_IF
    | TOKEN_FI
    | TOKEN_DO
    | TOKEN_OD
    | TOKEN_SKIP
    | TOKEN_TO
    | TOKEN_EOF
    | TOKEN_VAR
    | TOKEN_NUM
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_expression
    | NONTERM_boolean
    | NONTERM_command
    | NONTERM_guardedCommand

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | TIMES  -> 0 
  | DIV  -> 1 
  | PLUS  -> 2 
  | MINUS  -> 3 
  | POW  -> 4 
  | LPAR  -> 5 
  | RPAR  -> 6 
  | OPTION  -> 7 
  | LBRA  -> 8 
  | RBRA  -> 9 
  | TRUE  -> 10 
  | FALSE  -> 11 
  | NOT  -> 12 
  | AND  -> 13 
  | OR  -> 14 
  | ANDSC  -> 15 
  | ORSC  -> 16 
  | EQUAL  -> 17 
  | NOTEQUAL  -> 18 
  | GT  -> 19 
  | GET  -> 20 
  | LT  -> 21 
  | LET  -> 22 
  | ASSIGN  -> 23 
  | NEXT  -> 24 
  | IF  -> 25 
  | FI  -> 26 
  | DO  -> 27 
  | OD  -> 28 
  | SKIP  -> 29 
  | TO  -> 30 
  | EOF  -> 31 
  | VAR _ -> 32 
  | NUM _ -> 33 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_TIMES 
  | 1 -> TOKEN_DIV 
  | 2 -> TOKEN_PLUS 
  | 3 -> TOKEN_MINUS 
  | 4 -> TOKEN_POW 
  | 5 -> TOKEN_LPAR 
  | 6 -> TOKEN_RPAR 
  | 7 -> TOKEN_OPTION 
  | 8 -> TOKEN_LBRA 
  | 9 -> TOKEN_RBRA 
  | 10 -> TOKEN_TRUE 
  | 11 -> TOKEN_FALSE 
  | 12 -> TOKEN_NOT 
  | 13 -> TOKEN_AND 
  | 14 -> TOKEN_OR 
  | 15 -> TOKEN_ANDSC 
  | 16 -> TOKEN_ORSC 
  | 17 -> TOKEN_EQUAL 
  | 18 -> TOKEN_NOTEQUAL 
  | 19 -> TOKEN_GT 
  | 20 -> TOKEN_GET 
  | 21 -> TOKEN_LT 
  | 22 -> TOKEN_LET 
  | 23 -> TOKEN_ASSIGN 
  | 24 -> TOKEN_NEXT 
  | 25 -> TOKEN_IF 
  | 26 -> TOKEN_FI 
  | 27 -> TOKEN_DO 
  | 28 -> TOKEN_OD 
  | 29 -> TOKEN_SKIP 
  | 30 -> TOKEN_TO 
  | 31 -> TOKEN_EOF 
  | 32 -> TOKEN_VAR 
  | 33 -> TOKEN_NUM 
  | 36 -> TOKEN_end_of_input
  | 34 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_expression 
    | 3 -> NONTERM_expression 
    | 4 -> NONTERM_expression 
    | 5 -> NONTERM_expression 
    | 6 -> NONTERM_expression 
    | 7 -> NONTERM_expression 
    | 8 -> NONTERM_expression 
    | 9 -> NONTERM_expression 
    | 10 -> NONTERM_expression 
    | 11 -> NONTERM_expression 
    | 12 -> NONTERM_expression 
    | 13 -> NONTERM_boolean 
    | 14 -> NONTERM_boolean 
    | 15 -> NONTERM_boolean 
    | 16 -> NONTERM_boolean 
    | 17 -> NONTERM_boolean 
    | 18 -> NONTERM_boolean 
    | 19 -> NONTERM_boolean 
    | 20 -> NONTERM_boolean 
    | 21 -> NONTERM_boolean 
    | 22 -> NONTERM_boolean 
    | 23 -> NONTERM_boolean 
    | 24 -> NONTERM_boolean 
    | 25 -> NONTERM_boolean 
    | 26 -> NONTERM_boolean 
    | 27 -> NONTERM_command 
    | 28 -> NONTERM_command 
    | 29 -> NONTERM_command 
    | 30 -> NONTERM_command 
    | 31 -> NONTERM_command 
    | 32 -> NONTERM_command 
    | 33 -> NONTERM_guardedCommand 
    | 34 -> NONTERM_guardedCommand 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 36 
let _fsyacc_tagOfErrorTerminal = 34

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | TIMES  -> "TIMES" 
  | DIV  -> "DIV" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | POW  -> "POW" 
  | LPAR  -> "LPAR" 
  | RPAR  -> "RPAR" 
  | OPTION  -> "OPTION" 
  | LBRA  -> "LBRA" 
  | RBRA  -> "RBRA" 
  | TRUE  -> "TRUE" 
  | FALSE  -> "FALSE" 
  | NOT  -> "NOT" 
  | AND  -> "AND" 
  | OR  -> "OR" 
  | ANDSC  -> "ANDSC" 
  | ORSC  -> "ORSC" 
  | EQUAL  -> "EQUAL" 
  | NOTEQUAL  -> "NOTEQUAL" 
  | GT  -> "GT" 
  | GET  -> "GET" 
  | LT  -> "LT" 
  | LET  -> "LET" 
  | ASSIGN  -> "ASSIGN" 
  | NEXT  -> "NEXT" 
  | IF  -> "IF" 
  | FI  -> "FI" 
  | DO  -> "DO" 
  | OD  -> "OD" 
  | SKIP  -> "SKIP" 
  | TO  -> "TO" 
  | EOF  -> "EOF" 
  | VAR _ -> "VAR" 
  | NUM _ -> "NUM" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | TIMES  -> (null : System.Object) 
  | DIV  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | POW  -> (null : System.Object) 
  | LPAR  -> (null : System.Object) 
  | RPAR  -> (null : System.Object) 
  | OPTION  -> (null : System.Object) 
  | LBRA  -> (null : System.Object) 
  | RBRA  -> (null : System.Object) 
  | TRUE  -> (null : System.Object) 
  | FALSE  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | AND  -> (null : System.Object) 
  | OR  -> (null : System.Object) 
  | ANDSC  -> (null : System.Object) 
  | ORSC  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | NOTEQUAL  -> (null : System.Object) 
  | GT  -> (null : System.Object) 
  | GET  -> (null : System.Object) 
  | LT  -> (null : System.Object) 
  | LET  -> (null : System.Object) 
  | ASSIGN  -> (null : System.Object) 
  | NEXT  -> (null : System.Object) 
  | IF  -> (null : System.Object) 
  | FI  -> (null : System.Object) 
  | DO  -> (null : System.Object) 
  | OD  -> (null : System.Object) 
  | SKIP  -> (null : System.Object) 
  | TO  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | VAR _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | NUM _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 27us; 65535us; 24us; 4us; 25us; 5us; 26us; 6us; 27us; 7us; 28us; 8us; 29us; 9us; 30us; 10us; 33us; 11us; 34us; 12us; 36us; 13us; 40us; 14us; 48us; 14us; 49us; 14us; 50us; 14us; 51us; 14us; 53us; 15us; 54us; 16us; 55us; 17us; 56us; 18us; 57us; 19us; 58us; 20us; 60us; 21us; 61us; 22us; 63us; 23us; 68us; 14us; 71us; 14us; 75us; 14us; 9us; 65535us; 34us; 46us; 40us; 41us; 48us; 42us; 49us; 43us; 50us; 44us; 51us; 45us; 68us; 47us; 71us; 47us; 75us; 47us; 3us; 65535us; 0us; 2us; 67us; 65us; 76us; 66us; 3us; 65535us; 68us; 69us; 71us; 72us; 75us; 74us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 31us; 41us; 45us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 2us; 1us; 30us; 1us; 1us; 6us; 2us; 2us; 3us; 4us; 5us; 6us; 6us; 2us; 3us; 3us; 4us; 5us; 6us; 6us; 2us; 3us; 4us; 4us; 5us; 6us; 6us; 2us; 3us; 4us; 5us; 5us; 6us; 6us; 2us; 3us; 4us; 5us; 6us; 6us; 6us; 2us; 3us; 4us; 5us; 6us; 7us; 6us; 2us; 3us; 4us; 5us; 6us; 8us; 6us; 2us; 3us; 4us; 5us; 6us; 11us; 12us; 2us; 3us; 4us; 5us; 6us; 11us; 21us; 22us; 23us; 24us; 25us; 26us; 6us; 2us; 3us; 4us; 5us; 6us; 12us; 11us; 2us; 3us; 4us; 5us; 6us; 21us; 22us; 23us; 24us; 25us; 26us; 6us; 2us; 3us; 4us; 5us; 6us; 21us; 6us; 2us; 3us; 4us; 5us; 6us; 22us; 6us; 2us; 3us; 4us; 5us; 6us; 23us; 6us; 2us; 3us; 4us; 5us; 6us; 24us; 6us; 2us; 3us; 4us; 5us; 6us; 25us; 6us; 2us; 3us; 4us; 5us; 6us; 26us; 6us; 2us; 3us; 4us; 5us; 6us; 27us; 6us; 2us; 3us; 4us; 5us; 6us; 28us; 6us; 2us; 3us; 4us; 5us; 6us; 28us; 1us; 2us; 1us; 3us; 1us; 4us; 1us; 5us; 1us; 6us; 1us; 7us; 1us; 8us; 1us; 9us; 2us; 10us; 12us; 1us; 11us; 2us; 11us; 20us; 1us; 11us; 1us; 12us; 1us; 12us; 1us; 13us; 1us; 14us; 1us; 15us; 5us; 15us; 16us; 17us; 18us; 19us; 5us; 16us; 16us; 17us; 18us; 19us; 5us; 16us; 17us; 17us; 18us; 19us; 5us; 16us; 17us; 18us; 18us; 19us; 5us; 16us; 17us; 18us; 19us; 19us; 5us; 16us; 17us; 18us; 19us; 20us; 5us; 16us; 17us; 18us; 19us; 34us; 1us; 16us; 1us; 17us; 1us; 18us; 1us; 19us; 1us; 20us; 1us; 21us; 1us; 22us; 1us; 23us; 1us; 24us; 1us; 25us; 1us; 26us; 2us; 27us; 28us; 1us; 27us; 1us; 28us; 1us; 28us; 1us; 28us; 1us; 29us; 2us; 30us; 30us; 2us; 30us; 34us; 1us; 30us; 1us; 31us; 2us; 31us; 33us; 1us; 31us; 1us; 32us; 2us; 32us; 33us; 1us; 32us; 2us; 33us; 33us; 1us; 33us; 1us; 34us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 7us; 9us; 16us; 23us; 30us; 37us; 44us; 51us; 58us; 65us; 78us; 85us; 97us; 104us; 111us; 118us; 125us; 132us; 139us; 146us; 153us; 160us; 162us; 164us; 166us; 168us; 170us; 172us; 174us; 176us; 179us; 181us; 184us; 186us; 188us; 190us; 192us; 194us; 196us; 202us; 208us; 214us; 220us; 226us; 232us; 238us; 240us; 242us; 244us; 246us; 248us; 250us; 252us; 254us; 256us; 258us; 260us; 263us; 265us; 267us; 269us; 271us; 273us; 276us; 279us; 281us; 283us; 286us; 288us; 290us; 293us; 295us; 298us; 300us; |]
let _fsyacc_action_rows = 77
let _fsyacc_actionTableElements = [|4us; 32768us; 25us; 68us; 27us; 71us; 29us; 64us; 32us; 59us; 0us; 49152us; 2us; 32768us; 24us; 67us; 31us; 3us; 0us; 16385us; 1us; 16386us; 4us; 28us; 1us; 16387us; 4us; 28us; 3us; 16388us; 0us; 24us; 1us; 25us; 4us; 28us; 3us; 16389us; 0us; 24us; 1us; 25us; 4us; 28us; 1us; 16390us; 4us; 28us; 3us; 16391us; 0us; 24us; 1us; 25us; 4us; 28us; 3us; 16392us; 0us; 24us; 1us; 25us; 4us; 28us; 6us; 32768us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 6us; 35us; 12us; 32768us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 6us; 35us; 17us; 53us; 18us; 54us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 6us; 32768us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 9us; 37us; 11us; 32768us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 17us; 53us; 18us; 54us; 19us; 55us; 20us; 56us; 21us; 57us; 22us; 58us; 5us; 16405us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16406us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16407us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16408us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16409us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16410us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 16411us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 6us; 32768us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 9us; 62us; 5us; 16412us; 0us; 24us; 1us; 25us; 2us; 26us; 3us; 27us; 4us; 28us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 0us; 16393us; 1us; 16394us; 8us; 36us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 34us; 10us; 38us; 11us; 39us; 12us; 40us; 32us; 32us; 33us; 31us; 0us; 16395us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 0us; 16396us; 0us; 16397us; 0us; 16398us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 34us; 10us; 38us; 11us; 39us; 12us; 40us; 32us; 32us; 33us; 31us; 4us; 16399us; 13us; 48us; 14us; 49us; 15us; 50us; 16us; 51us; 2us; 16400us; 15us; 50us; 16us; 51us; 2us; 16401us; 15us; 50us; 16us; 51us; 0us; 16402us; 0us; 16403us; 5us; 32768us; 6us; 52us; 13us; 48us; 14us; 49us; 15us; 50us; 16us; 51us; 5us; 32768us; 13us; 48us; 14us; 49us; 15us; 50us; 16us; 51us; 30us; 76us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 34us; 10us; 38us; 11us; 39us; 12us; 40us; 32us; 32us; 33us; 31us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 34us; 10us; 38us; 11us; 39us; 12us; 40us; 32us; 32us; 33us; 31us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 34us; 10us; 38us; 11us; 39us; 12us; 40us; 32us; 32us; 33us; 31us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 34us; 10us; 38us; 11us; 39us; 12us; 40us; 32us; 32us; 33us; 31us; 0us; 16404us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 2us; 32768us; 8us; 61us; 23us; 60us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 1us; 32768us; 23us; 63us; 5us; 32768us; 2us; 29us; 3us; 30us; 5us; 33us; 32us; 32us; 33us; 31us; 0us; 16413us; 1us; 16414us; 24us; 67us; 1us; 16418us; 24us; 67us; 4us; 32768us; 25us; 68us; 27us; 71us; 29us; 64us; 32us; 59us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 34us; 10us; 38us; 11us; 39us; 12us; 40us; 32us; 32us; 33us; 31us; 2us; 32768us; 7us; 75us; 26us; 70us; 0us; 16415us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 34us; 10us; 38us; 11us; 39us; 12us; 40us; 32us; 32us; 33us; 31us; 2us; 32768us; 7us; 75us; 28us; 73us; 0us; 16416us; 1us; 16417us; 7us; 75us; 8us; 32768us; 2us; 29us; 3us; 30us; 5us; 34us; 10us; 38us; 11us; 39us; 12us; 40us; 32us; 32us; 33us; 31us; 4us; 32768us; 25us; 68us; 27us; 71us; 29us; 64us; 32us; 59us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 5us; 6us; 9us; 10us; 12us; 14us; 18us; 22us; 24us; 28us; 32us; 39us; 52us; 59us; 71us; 77us; 83us; 89us; 95us; 101us; 107us; 113us; 120us; 126us; 132us; 138us; 144us; 150us; 156us; 162us; 168us; 169us; 171us; 177us; 186us; 187us; 193us; 194us; 195us; 196us; 205us; 210us; 213us; 216us; 217us; 218us; 224us; 230us; 239us; 248us; 257us; 266us; 267us; 273us; 279us; 285us; 291us; 297us; 303us; 306us; 312us; 318us; 320us; 326us; 327us; 329us; 331us; 336us; 345us; 348us; 349us; 358us; 361us; 362us; 364us; 373us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 3us; 3us; 3us; 3us; 3us; 2us; 2us; 1us; 1us; 3us; 4us; 1us; 1us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 6us; 1us; 3us; 3us; 3us; 3us; 3us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 2us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 3us; 4us; 4us; 4us; 4us; 4us; 4us; 5us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16393us; 65535us; 65535us; 65535us; 16395us; 65535us; 16396us; 16397us; 16398us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16404us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 65535us; 16413us; 65535us; 65535us; 65535us; 65535us; 65535us; 16415us; 65535us; 65535us; 16416us; 65535us; 65535us; 65535us; |]
let _fsyacc_reductions ()  =    [| 
# 302 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 311 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "CompilerParser.fsp"
                                                      _1 
                   )
# 40 "CompilerParser.fsp"
                 : cmd));
# 322 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 50 "CompilerParser.fsp"
                                                                TimesExpr(_1,_3) 
                   )
# 50 "CompilerParser.fsp"
                 : expr));
# 334 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "CompilerParser.fsp"
                                                                DivExpr(_1,_3) 
                   )
# 51 "CompilerParser.fsp"
                 : expr));
# 346 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "CompilerParser.fsp"
                                                               PlusExpr(_1,_3) 
                   )
# 52 "CompilerParser.fsp"
                 : expr));
# 358 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "CompilerParser.fsp"
                                                               MinusExpr(_1,_3) 
                   )
# 53 "CompilerParser.fsp"
                 : expr));
# 370 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "CompilerParser.fsp"
                                                               PowExpr(_1,_3) 
                   )
# 54 "CompilerParser.fsp"
                 : expr));
# 382 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "CompilerParser.fsp"
                                                               UPlusExpr(_2) 
                   )
# 55 "CompilerParser.fsp"
                 : expr));
# 393 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "CompilerParser.fsp"
                                                               UMinusExpr(_2) 
                   )
# 56 "CompilerParser.fsp"
                 : expr));
# 404 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : float)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 57 "CompilerParser.fsp"
                                                               Num(_1) 
                   )
# 57 "CompilerParser.fsp"
                 : expr));
# 415 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 58 "CompilerParser.fsp"
                                                               Var(_1) 
                   )
# 58 "CompilerParser.fsp"
                 : expr));
# 426 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "CompilerParser.fsp"
                                                               ParenExpr(_2) 
                   )
# 59 "CompilerParser.fsp"
                 : expr));
# 437 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 60 "CompilerParser.fsp"
                                                               Index(_1,_3) 
                   )
# 60 "CompilerParser.fsp"
                 : expr));
# 449 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 63 "CompilerParser.fsp"
                                          TrueLogic 
                   )
# 63 "CompilerParser.fsp"
                 : logic));
# 459 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "CompilerParser.fsp"
                                           FalseLogic 
                   )
# 64 "CompilerParser.fsp"
                 : logic));
# 469 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 65 "CompilerParser.fsp"
                                               NotLogic(_2) 
                   )
# 65 "CompilerParser.fsp"
                 : logic));
# 480 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "CompilerParser.fsp"
                                                     AndLogic(_1,_3) 
                   )
# 66 "CompilerParser.fsp"
                 : logic));
# 492 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 67 "CompilerParser.fsp"
                                                    OrLogic(_1,_3) 
                   )
# 67 "CompilerParser.fsp"
                 : logic));
# 504 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "CompilerParser.fsp"
                                                       AndSCLogic(_1,_3) 
                   )
# 68 "CompilerParser.fsp"
                 : logic));
# 516 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 69 "CompilerParser.fsp"
                                                      OrSCLogic(_1,_3) 
                   )
# 69 "CompilerParser.fsp"
                 : logic));
# 528 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "CompilerParser.fsp"
                                                    ParenLogic(_2) 
                   )
# 70 "CompilerParser.fsp"
                 : logic));
# 539 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "CompilerParser.fsp"
                                                           EqualLogic(_1,_3) 
                   )
# 71 "CompilerParser.fsp"
                 : logic));
# 551 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 72 "CompilerParser.fsp"
                                                                NotEqualLogic(_1,_3) 
                   )
# 72 "CompilerParser.fsp"
                 : logic));
# 563 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 73 "CompilerParser.fsp"
                                                            GTLogic(_1,_3) 
                   )
# 73 "CompilerParser.fsp"
                 : logic));
# 575 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 74 "CompilerParser.fsp"
                                                             GETLogic(_1,_3) 
                   )
# 74 "CompilerParser.fsp"
                 : logic));
# 587 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "CompilerParser.fsp"
                                                             LTLogic(_1,_3) 
                   )
# 75 "CompilerParser.fsp"
                 : logic));
# 599 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 76 "CompilerParser.fsp"
                                                             LETLogic(_1,_3) 
                   )
# 76 "CompilerParser.fsp"
                 : logic));
# 611 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 79 "CompilerParser.fsp"
                                                                      AssignVar(_1,_3) 
                   )
# 79 "CompilerParser.fsp"
                 : cmd));
# 623 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            let _6 = (let data = parseState.GetInput(6) in (Microsoft.FSharp.Core.Operators.unbox data : expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 80 "CompilerParser.fsp"
                                                                      AssignArr(_1,_3,_6) 
                   )
# 80 "CompilerParser.fsp"
                 : cmd));
# 636 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 81 "CompilerParser.fsp"
                                                                      Skip 
                   )
# 81 "CompilerParser.fsp"
                 : cmd));
# 646 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : cmd)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : cmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "CompilerParser.fsp"
                                                                      SeqCmd(_1,_3) 
                   )
# 82 "CompilerParser.fsp"
                 : cmd));
# 658 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : grdCmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 83 "CompilerParser.fsp"
                                                                      IfCmd(_2) 
                   )
# 83 "CompilerParser.fsp"
                 : cmd));
# 669 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : grdCmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 84 "CompilerParser.fsp"
                                                                      DoCmd(_2) 
                   )
# 84 "CompilerParser.fsp"
                 : cmd));
# 680 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : grdCmd)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : grdCmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 87 "CompilerParser.fsp"
                                                                    SeqGrdCmd(_1,_3) 
                   )
# 87 "CompilerParser.fsp"
                 : grdCmd));
# 692 "CompilerParser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : logic)) in
            let _3 = (let data = parseState.GetInput(3) in (Microsoft.FSharp.Core.Operators.unbox data : cmd)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "CompilerParser.fsp"
                                                             ThenGrdCmd(_1,_3) 
                   )
# 88 "CompilerParser.fsp"
                 : grdCmd));
|]
# 705 "CompilerParser.fs"
let tables () : FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 37;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : cmd =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
