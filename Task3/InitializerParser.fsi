// Signature file for parser generated by fsyacc
module InitializerParser
type token = 
  | LBRA2
  | RBRA2
  | EQUAL2
  | SEPAR
  | EOF
  | VAR2 of (string)
  | NUM2 of (int)
type tokenId = 
    | TOKEN_LBRA2
    | TOKEN_RBRA2
    | TOKEN_EQUAL2
    | TOKEN_SEPAR
    | TOKEN_EOF
    | TOKEN_VAR2
    | TOKEN_NUM2
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_arrayElem
    | NONTERM_initialize
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (init) 
